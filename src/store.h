#ifndef STORE_H
#define STORE_H

#include <QQuickItem>

#include <QDebug>
#include <QVector>
#include <QMetaProperty>
#include <QStandardPaths>
#include <QDir>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonValue>
#include <QJsonArray>

class Store : public QQuickItem
{
    Q_OBJECT

    //Q_PROPERTY(bool autoLoad READ autoLoad WRITE setAutoLoad NOTIFY autoLoadChanged)
    //Q_PROPERTY(bool autoSave READ autoSave WRITE setAutoSave NOTIFY autoSaveChanged)
    Q_PROPERTY(QString name READ name WRITE setName NOTIFY nameChanged)
    Q_PROPERTY(bool isLoaded READ isLoaded NOTIFY isLoadedChanged)

    public:
        explicit Store(QQuickItem* parent = 0);
    /*
        ~Store();

        bool autoLoad();
        void setAutoLoad(const bool &v);

        bool autoSave();
        void setAutoSave(const bool &v);
*/
        QString name();
        void setName(const QString &n);

        bool isLoaded();

        Q_INVOKABLE bool existOnDisk();
        Q_INVOKABLE QString fullPath();

    // Signals should only be defined in the header
    // as the implementation is autogenerated.
    // Also they cannot have return types, thus void
    signals:
        void cleared();
        void saving();
        void saved();
        void loaded();
        void error(const QString& msg);
        void nameChanged();
        //void autoLoadChanged();
        //void autoSaveChanged();
        void isLoadedChanged();

    public slots:
        void save();
        void load();
        void clear();
        void clear(const QString& name);
        void clearAll();

    private:
        QString _name;
        QString _store_path;
        QStringList _blacklist;

        //bool _autoLoad;
        //bool _autoSave;
        bool _loaded;

        void _ensureStorePath();
        void _ensurePath(const QString& path);
};

#endif // STORE_H
